const should = require('should')
const IndexContent = require('../lib/indexContent.js')

module.exports = () =>
  describe('Full text index content (tokenize, sort, etc.)', function () {
    it('tokenize', function () {
      IndexContent.tokenize(undefined).should.deepEqual([])
      IndexContent.tokenize('').should.deepEqual([])
      IndexContent.tokenize('~').should.deepEqual(['~'])
      IndexContent.tokenize('a b').should.deepEqual(['a', ' ', 'b'])
      IndexContent.tokenize('a  b').should.deepEqual(['a', ' ', 'b'])
      IndexContent.tokenize('a~~b').should.deepEqual(['a', '~', '~', 'b'])
      IndexContent.tokenize('a23b').should.deepEqual(['a', '2', '3', 'b'])
      IndexContent.tokenize('a1b').should.deepEqual(['a', '1', 'b'])
      IndexContent.tokenize('a_b').should.deepEqual(['a', '_', 'b'])
      IndexContent.tokenize('a\nb').should.deepEqual(['a', '\n', 'b'])
      IndexContent.tokenize('ab').should.deepEqual(['ab'])
      IndexContent.tokenize(' ab\n').should.deepEqual(['ab'])
      IndexContent.tokenize('ab~cd').should.deepEqual(['ab', '~', 'cd'])
      IndexContent.tokenize('a__b').should.deepEqual(['a', '_', '_', 'b'])
      IndexContent.tokenize('a__b c2d ef g').should.deepEqual(['a', '_', '_', 'b', ' ', 'c', '2', 'd', ' ', 'ef', ' ', 'g'])
    })
    it('lcsLength', function () {
      IndexContent.lcsLength(IndexContent.tokenize(''), IndexContent.tokenize('')).should.equal(0)
      IndexContent.lcsLength(IndexContent.tokenize('a'), IndexContent.tokenize('')).should.equal(0)
      IndexContent.lcsLength(IndexContent.tokenize(''), IndexContent.tokenize('a')).should.equal(0)
      IndexContent.lcsLength(IndexContent.tokenize('a'), IndexContent.tokenize('a')).should.equal(1)
      IndexContent.lcsLength(IndexContent.tokenize('aa'), IndexContent.tokenize('a')).should.equal(0)
      IndexContent.lcsLength(IndexContent.tokenize('aa'), IndexContent.tokenize('aa')).should.equal(1)
      IndexContent.lcsLength(IndexContent.tokenize('abcd'), IndexContent.tokenize('abc')).should.equal(0)
      IndexContent.lcsLength(IndexContent.tokenize('The big fox jumps over the lazy dog.'), IndexContent.tokenize('fox jumps over the')).should.equal(7)
      IndexContent.lcsLength(IndexContent.tokenize('The big fox jumps the lazy dog.'), IndexContent.tokenize('fox jumps over the')).should.equal(5)
      IndexContent.lcsLength(IndexContent.tokenize('The big fox jumps over the lazy dog.'), IndexContent.tokenize('fox jumps the')).should.equal(5)
      IndexContent.lcsLength(IndexContent.tokenize('big fox jumps over the lazy dog.'), IndexContent.tokenize('fox jumps the')).should.equal(5)
      IndexContent.lcsLength(IndexContent.tokenize('big fox Jumps over the lazy dog.'), IndexContent.tokenize('fox jumps the')).should.equal(5)
      IndexContent.lcsLength(IndexContent.tokenize('The big fox Jumps over the lazy dog.'), IndexContent.tokenize('the fox jumps the dog')).should.equal(9)
      IndexContent.lcsLength(IndexContent.tokenize('The big fox Jumps over the lazy dog.'), IndexContent.tokenize('the jumps fox the dog')).should.equal(8)
      IndexContent.lcsLength(IndexContent.tokenize('The big fox jumps over the lazy dog.'), IndexContent.tokenize('the fox  jumps the dog')).should.equal(9)
      IndexContent.lcsLength(IndexContent.tokenize('The big fox jumps over the lazy dog.'), IndexContent.tokenize(' the   jumps fox the dog')).should.equal(8)
      IndexContent.lcsLength(IndexContent.tokenize('The big fox jumps over the lazy dog.'), IndexContent.tokenize('the')).should.equal(1)
      IndexContent.lcsLength(IndexContent.tokenize('The big fox jumps over the lazy dog.'), IndexContent.tokenize('what so ever')).should.equal(2)
      IndexContent.lcsLength(IndexContent.tokenize('The big fox jumps over the lazy dog.'), IndexContent.tokenize('the the')).should.equal(3)
      IndexContent.lcsLength(IndexContent.tokenize('The big fox jumps over the lazy dog.'), IndexContent.tokenize('thethe')).should.equal(0)
    })
    const realLifeData = require('./data/index-content.js')
    for (let idx = 0; idx < realLifeData.length; idx ++) {
      (function (better, worse, query) {
        it('Real life test case ' + idx, function () {
          let queryTokens = IndexContent.tokenize(query)
          let betterScore = IndexContent.lcsLength(IndexContent.tokenize(better), queryTokens)
          let worseScore = IndexContent.lcsLength(IndexContent.tokenize(worse), queryTokens)
          console.log(`    Better: ${betterScore}, worse: ${worseScore}, difference factor: ${betterScore / worseScore}`)
          betterScore.should.be.above(worseScore)
        })
      })(realLifeData[idx].better, realLifeData[idx].worse, realLifeData[idx].query)
    }
  })
