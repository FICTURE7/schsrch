const PaperUtils = require('../view/paperutils.js')
const should = require('should')

module.exports = () =>
  describe('paperutils.js', function () {
    it('setToString should work', function () {
      PaperUtils.setToString({subject: 'subj', time: 'y00', paper: 1, variant: 2}).should.equal('subj_y00_1_2')
    })
    it('setEqual should work', function () {
      PaperUtils.setEqual({subject: 'subj', time: 'y00', paper: 1, variant: 2}, {subject: 'subj', time: 'y00', paper: 1, variant: 2}).should.be.true()
      PaperUtils.setEqual({subject: 'subj', time: 'y00', paper: 1, variant: 2}, {subject: '0610', time: 'y00', paper: 1, variant: 2}).should.be.false()
      PaperUtils.setEqual({subject: 'subj', time: 'y00', paper: 1, variant: 2}, {subject: 'subj', time: 's16', paper: 1, variant: 2}).should.be.false()
      PaperUtils.setEqual({subject: 'subj', time: 'y00', paper: 2, variant: 2}, {subject: 'subj', time: 'y00', paper: 1, variant: 2}).should.be.false()
      PaperUtils.setEqual({subject: 'subj', time: 'y00', paper: 1, variant: 2}, {subject: 'subj', time: 'y00', paper: 1, variant: 2}).should.be.true()
      PaperUtils.setEqual({}, {}).should.be.true()
      PaperUtils.setEqual({subject: '0610'}, {}).should.be.false()
      PaperUtils.setEqual({subject: '0610'}, {subject: '0610', time: 's16'}).should.be.false()
    })
    it('getTypeString should work', function () {
      PaperUtils.longTypes.should.deepEqual(PaperUtils.shortTypes.map(PaperUtils.getTypeString))
      PaperUtils.getTypeString('xx').should.equal('xx')
      PaperUtils.getTypeString('').should.equal('--')
      PaperUtils.getTypeString().should.equal('--')
    })
    it('funcSortType', function () {
      PaperUtils.funcSortType('qp', 'ms').should.be.below(0)
      PaperUtils.funcSortType('er', 'in').should.be.above(0)
      PaperUtils.funcSortType('gt', 'gt').should.equal(0)
      PaperUtils.funcSortType('xx', 'yy').should.equal(0)
      PaperUtils.shortTypes.forEach(ty => {
        PaperUtils.funcSortType('xx', ty).should.be.below(0)
        PaperUtils.funcSortType(ty, 'xx').should.be.above(0)
      })
    })
    it('capitalizeFirst', function () {
      PaperUtils.capitalizeFirst('').should.equal('')
      PaperUtils.capitalizeFirst('a').should.equal('A')
      PaperUtils.capitalizeFirst('abc').should.equal('Abc')
      PaperUtils.capitalizeFirst('aBC').should.equal('ABC')
      PaperUtils.capitalizeFirst('Abc').should.equal('Abc')
      PaperUtils.capitalizeFirst('123').should.equal('123')
      PaperUtils.capitalizeFirst('1a').should.equal('1a')
    })
    it('funcSortBucket', function () {
      const base = {subject: '0610', time: 's16', paper: 0, variant: 0}
      const extendBase = o => Object.assign({}, base, o)
      PaperUtils.funcSortSet(base, base).should.equal(0)
      PaperUtils.funcSortSet(extendBase({subject: '0609'}), base).should.be.below(0)
      PaperUtils.funcSortSet(extendBase({subject: '0619'}), base).should.be.above(0)
      PaperUtils.funcSortSet(extendBase({time: 's17'}), extendBase({subject: '0619'})).should.be.below(0)
      PaperUtils.funcSortSet(base, extendBase({time: 's17'})).should.be.below(0)
      PaperUtils.funcSortSet(extendBase({paper: 2}), extendBase({time: 's17', paper: 1})).should.be.below(0)
      PaperUtils.funcSortSet(extendBase({time: 's17', paper: 1}), extendBase({paper: 2})).should.be.above(0)
      PaperUtils.funcSortSet(extendBase({time: 'sh7'}), base).should.be.below(0)
      PaperUtils.funcSortSet(base, extendBase({time: 'sh7'})).should.be.above(0)
      PaperUtils.funcSortSet(extendBase({time: 'sh7'}), extendBase({time: 'sh7'})).should.equal(0)
      PaperUtils.funcSortSet(extendBase({time: 's17', paper: 1}), extendBase({time: 'm17', paper: 2})).should.be.above(0)
      PaperUtils.funcSortSet(extendBase({time: 's17', paper: 1}), extendBase({time: 'x17', paper: 2})).should.be.above(0)
      PaperUtils.funcSortSet(extendBase({time: 'x17', paper: 1}), extendBase({time: 's17', paper: 2})).should.be.below(0)
      PaperUtils.funcSortSet(extendBase({time: 'x17', paper: 1}), extendBase({time: 'x17', paper: 2})).should.be.below(0)
      PaperUtils.funcSortSet(extendBase({time: 'x17', paper: 2}), extendBase({time: 'x17', paper: 1})).should.be.above(0)
      PaperUtils.funcSortSet(extendBase({paper: 1}), extendBase({paper: 2})).should.be.below(0)
      PaperUtils.funcSortSet(extendBase({paper: 2}), extendBase({paper: 1})).should.be.above(0)
      PaperUtils.funcSortSet(extendBase({paper: 2, variant: 1}), extendBase({paper: 1, variant: 2})).should.be.above(0)
      PaperUtils.funcSortSet(extendBase({paper: 2, variant: 2}), extendBase({paper: 2, variant: 2})).should.equal(0)
      PaperUtils.funcSortSet(extendBase({paper: 2, variant: 2}), extendBase({paper: 2, variant: 3})).should.be.below(0)
      PaperUtils.funcSortSet(extendBase({paper: 2, variant: 2}), extendBase({paper: 2, variant: 1})).should.be.above(0)
      ;(() => PaperUtils.funcSortSet(base, extendBase({paper: 'h'}))).should.throw(/integer/i)
      ;(() => PaperUtils.funcSortSet(base, extendBase({variant: 'j'}))).should.throw(/integer/i)
      ;(() => PaperUtils.funcSortSet(base, extendBase({paper: null}))).should.throw(/integer/i)
    })
    it('myTimeToHumanTime', function () {
      const testForYr = (yr, yrx) => PaperUtils.shortMonths.map(m => PaperUtils.myTimeToHumanTime(m + yr)).should.deepEqual(PaperUtils.longMonths.map(lm => `${lm} ${yrx}`))
      testForYr('16', '2016')
      testForYr('17', '2017')
      testForYr('05', '2005')
      PaperUtils.myTimeToHumanTime('x16').should.equal('x16')
      PaperUtils.myTimeToHumanTime('sh1').should.equal('sh1')
      testForYr('5', '2005')
    })
    it('odashMonthToMyMonth', function () {
      PaperUtils.odashMonths.map(x => x.replace(/\//g, '')).map(PaperUtils.odashMonthToMyMonth).should.deepEqual(PaperUtils.shortMonths)
      PaperUtils.odashMonths.map(PaperUtils.odashMonthToMyMonth).should.deepEqual(PaperUtils.shortMonths)
      PaperUtils.odashMonthToMyMonth('X/Y').should.equal('X/Y')
    })
    it('extractSet', function () {
      let set = {subject: 1, time: 2, paper: 3, variant: 4}
      PaperUtils.extractSet(set).should.deepEqual(set)
      PaperUtils.extractSet(Object.assign({}, set, {type: 'ms'})).should.deepEqual(set)
      PaperUtils.extractSet(Object.assign({}, set, {variant: 5})).should.not.deepEqual(set)
      PaperUtils.extractSet(Object.assign({}, set, {variant: 5, type: 'ms'})).should.not.deepEqual(set)
    })
  })
